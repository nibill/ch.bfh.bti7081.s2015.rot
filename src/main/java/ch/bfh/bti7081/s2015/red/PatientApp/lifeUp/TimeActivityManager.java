package ch.bfh.bti7081.s2015.red.PatientApp.lifeUp;import java.util.ArrayList;import java.util.Date;import ch.bfh.bti7081.s2015.red.PatientApp.Model.Activity;import ch.bfh.bti7081.s2015.red.PatientApp.Model.GpsActivity;import ch.bfh.bti7081.s2015.red.PatientApp.lifeUp.ActivityState;public class TimeActivityManager implements Runnable {	volatile private static TimeActivityManager instance = null;	volatile private ArrayList<Activity> activites = new ArrayList<Activity>();	volatile private Activity currentActivity;		public static TimeActivityManager getInstance() {		if (instance == null) {			instance = new TimeActivityManager();		}		return instance;	}	public TimeActivityManager() {		System.out.println("MEGA");		(new Thread(this)).start();	}	public void chooseActivity(Activity activity) {  		for (int i = 0; i < activites.size(); i++) {			if ( activity.getId().equals(activites.get(i).getId()) ) {				currentActivity = activites.get(i);			}		}			}	public void nextState() {		currentActivity.nextState();	}		public void addActivity(Activity activity) {		System.out.println("T: fÃ¼ge Activity hinzu");		activites.add(activity);	}	 	public void getStateName() {		System.out.println(currentActivity.getStateName());	}	private TimeActivityManager(Date softTimeLimit, Date hardTimeLimit) {		// Date now = new Date();		// softTimeLimitSeconds = (softTimeLimit.getTime()-now.getTime()) /		// 1000;		// hardTimeLimitSeconds =		// (hardTimeLimit.getTime()-softTimeLimit.getTime()) / 1000;	}	@Override	public void run() {		// TODO Auto-generated method stub		System.out.println("Thread erwacht");		controlActivitesScheduled();	}	private void controlActivitesScheduled() {		// TODO Auto-generated method stub		try {			Thread.sleep(5000);	 			Date now = new Date();  									for (int i = 0; i < activites.size(); i++) {				Activity registratedActivity = activites.get(i);  				int hardTimeLimitRest = (int) ((registratedActivity.getHardTimeLimit().getTime()-now.getTime()) / 1000); 												System.out.println("["+ registratedActivity +"] Status Nr. ("+i+"):" + registratedActivity.getStateName());				System.out.println("["+ registratedActivity +"] Softlimit Nr. ("+i+"):" + registratedActivity.getSoftTimeLimit());				System.out.println("["+ registratedActivity +"] Hardlimit Nr. ("+i+"):" + registratedActivity.getHardTimeLimit());				System.out.println(hardTimeLimitRest);				System.out.println("-------------------------------------------------");								if ( hardTimeLimitRest < 0 ) {					System.out.println("Versagt!");					registratedActivity.nextState(); 				}							}			System.out.println("-------------------------------------------------");											} catch (InterruptedException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		controlActivitesScheduled();	}	public void setActivityState(ActivityState activityState) {		// TODO Auto-generated method stub		System.out.println("setActivityState von Thread auf "+ activityState.getStateName()  +" gesetzt!");		currentActivity.setActivityState(activityState);		activites.set(activites.indexOf(currentActivity), currentActivity);		System.out.println("IN Arraylist: " + currentActivity.getStateName());	}	public Activity getActivity() {		return activites.get(getActivityIndex());	}		private int getActivityIndex() {		return activites.indexOf(currentActivity);	}}