package ch.bfh.bti7081.s2015.red.PatientApp.LifeUp;import java.util.ArrayList;import java.util.Date;import ch.bfh.bti7081.s2015.red.PatientApp.LifeUp.ActivityState;import ch.bfh.bti7081.s2015.red.PatientApp.Model.Activity;import ch.bfh.bti7081.s2015.red.PatientApp.Model.GpsActivity;public class TimeActivityManager implements Runnable {	volatile private static TimeActivityManager instance = null;	volatile private ArrayList<Activity> activites = new ArrayList<Activity>();	volatile private Activity currentActivity;		public static TimeActivityManager getInstance() {		if (instance == null) {			instance = new TimeActivityManager();		}		return instance;	}	private TimeActivityManager() {		(new Thread(this)).start();	}	public void chooseActivity(Activity activity) {  		for (int i = 0; i < activites.size(); i++) {			if ( activity.getId().equals(activites.get(i).getId()) ) {				currentActivity = activites.get(i);			}		}			}	public void nextState() {		currentActivity.nextState();	}	public void addActivity(Activity activity) { 		activites.add(activity);	}		private void removeActivity(Activity activity) {		activites.remove(activites.indexOf(activity));	}	@Override	public void run() {		controlActivitesScheduled();	}	private void controlActivitesScheduled() {		try {						Thread.sleep(5000);			Date now = new Date();  /*						ArrayList<Activity> removeLater = new ArrayList<Activity>();						for (int i = 0; i < activites.size(); i++) {				Activity registratedActivity = activites.get(i);  				int hardTimeLimitRest = (int) ((registratedActivity.getHardTimeLimit().getTime()-now.getTime()) / 1000); 												System.out.println("["+ registratedActivity +"] Status Nr. ("+i+"):" + registratedActivity.getStateName());				System.out.println("["+ registratedActivity +"] Softlimit Nr. ("+i+"):" + registratedActivity.getSoftTimeLimit());				System.out.println("["+ registratedActivity +"] Hardlimit Nr. ("+i+"):" + registratedActivity.getHardTimeLimit());				System.out.println(hardTimeLimitRest);				System.out.println("-------------------------------------------------");								if ( hardTimeLimitRest < 0 && registratedActivity.getStateName().equals("InProgress") ) {					registratedActivity.nextState(); 				}								if ( !registratedActivity.getStateName().equals("TimeActivityReady") && !registratedActivity.getStateName().equals("InProgress")  ) {					removeLater.add(registratedActivity);				}							}						for ( int i = 0; i < removeLater.size(); i++ ) {				removeActivity(removeLater.get(i));			}						System.out.println("-------------------------------------------------");*/					} catch (InterruptedException e) {			e.printStackTrace();		}		controlActivitesScheduled();	}	public void setActivityState(ActivityState activityState) {		currentActivity.setActivityState(activityState);		activites.set(activites.indexOf(currentActivity), currentActivity);	}	public Activity getActivity() {		return activites.get(getActivityIndex());	}		private int getActivityIndex() {		return activites.indexOf(currentActivity);	}}